@model InMyAppinion.Models.SubjectReview
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Recenzija";
}

<div class=row>
    <div class="col-md-6 bs-callout-danger">
        <a asp-for="Details" asp-controller="Subjects" asp-route-id="@Model.SubjectID">
            <h2>@Model.Subject.Name</h2>
        </a>
    </div>
    <div class="col-md-2 margins">
    @if (await AuthorizationService.AuthorizeAsync(User, "CanModerate"))
    {

        <form asp-action="Delete">
            <input type="hidden" name="id" value="@Model.ID" />
            <button type="submit" class="btn btn-danger del" title="Obriši recenziju">
                <span class="glyphicon glyphicon-trash"></span>
            </button>
        </form>
            <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-info"><span class="glyphicon glyphicon-pencil">Uredi</span></a>
    }
    else if (User.Identity.Name == Model.Author.UserName)
    {
            <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-info"><span class="glyphicon glyphicon-pencil">Uredi</span></a>
    }
    </div>
</div>

<div>
    <hr />
    <div class="well">
        <div class="media">
            <a class="pull-left" asp-action="Profile" asp-controller="Account" asp-route-id="@Model.Author.UserName">


                <img style="width:100px;height:100px" class="media-object img-responsive img-circle img-thumbnail" src="@Model.Author.Avatar" alt="profilePic">

                <p class="text-center">@Model.Author.UserName</p>
            </a>
            <div class="media-body">
                <h3 class="media-heading text-center">@Model.Title</h3> <br />
                <p>
                    @Html.Raw(Model.Text)
                </p>
                <hr />
                <small>@Html.DisplayNameFor(model=>model.UsefulnessGrade)</small>
                <div class="circle" id="circles-usefulness" style="display: inline"></div>
                <small>@Html.DisplayNameFor(model => model.DifficultyGrade)</small>
                <div class="circle" id="circles-difficulty" style="display: inline"></div>
                <small>@Html.DisplayNameFor(model => model.InterestGrade)</small>
                <div class="circle" id="circles-interest" style="display: inline"></div>
                <hr />
                Tagovi:
                @foreach (var tag in Model.SubjectReviewTagSet.Select(s => s.SubjectReviewTag))
                {
                    <b class="btn btn-xs btn-info">@tag.Name </b>
                                                    @if (await AuthorizationService.AuthorizeAsync(User, "CanModerate"))
                                                    {
                                                        <button class="btn btn-default btn-xs deleteajax" data-tagid="@tag.ID" data-subjectid="@Model.ID" title="Obriši tag">
                                                            <span class="glyphicon glyphicon-minus"></span>
                                                        </button>
                                                    }
                }
                <ul class="list-inline list-unstyled">
                    <li><span><i class="glyphicon glyphicon-calendar"></i>@Model.Timestamp</span></li>
                    <li>|</li>
                    <li>
                        <div id="stars"><small>@Model.TotalGrade</small></div>
                    </li>
                    <li>|</li>
                    <li title="Bodovi">
                        <div>
                            Bodovi:
                            @if (Model.Points > 0)
                            {
                                <span style="color: green">
                                    <span class="glyphicon glyphicon-thumbs-up"></span> @Model.Points
                                </span>
                            }
                            else if (Model.Points < 0)
                            {
                                <span style="color: red">
                                    <span class="glyphicon glyphicon-thumbs-down"></span> @Model.Points
                                </span>
                            }
                            else
                            {
                                <span>@Model.Points</span>
                            }
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>

        @if ((await AuthorizationService.AuthorizeAsync(User, "CanReview") && (User.Identity.Name != Model.Author.UserName)))
        {
            <button class="btn btn-lg btn-success voteajax" id="voteup" data-vote="true"><span class="glyphicon glyphicon-thumbs-up"></span></button>
            <button class="btn btn-lg btn-danger voteajax" id="votedown" data-vote="false"><span class="glyphicon glyphicon-thumbs-down"></span></button>
        }
        <input hidden id="voted" value="@ViewBag.voted" />
        <a asp-action="Index" class="btn btn-danger btn-sm pull-right" asp-route-id="@Model.SubjectID">Povratak na kritike predmeta</a>
        <hr />
        @if (await AuthorizationService.AuthorizeAsync(User, "CanReview"))
        {
            <div class="clear">
                <textarea id="text" class="form-control" rows="3" data-text title="Unesite komentar"></textarea>
                <input hidden data-reviewId="@Model.ID" />
                <input hidden data-type="subject" />
                <input id="username" hidden value="@User.Identity.Name" /><br />
                <button class="btn btn-info addajax"><span class="glyphicon glyphicon-plus"></span>Dodaj komentar</button>
            </div>
        }
    </div>
    <h4>Komentari</h4>
    <div id="comments" class="col-lg-6" style="background-color:whitesmoke">
        @foreach (var c in Model.Comments)
        {
            <div id="@c.ID">
                @if (SignInManager.IsSignedIn(User) && (User.Identity.Name == c.Author.UserName ||
                    await AuthorizationService.AuthorizeAsync(User, "CanModerate")))
                {
                    <button data-commentid="@c.ID" data-userid="@c.AuthorID" class="pull-right btn btn-danger btn-xs deleteajax">
                        <span class="glyphicon glyphicon-remove"></span>
                    </button>
                }
                <h5><a asp-controller="Account" asp-action="Profile" asp-route-username="@c.Author.UserName">
                        <span><strong>@await UserManager.FindByIdAsync(c.AuthorID)</strong></span>
                    </a>
                    , @c.Timestamp, <span id="points-comment-@c.ID">@c.Points</span>
                </h5>
                <p class="comment">@c.Text</p>
                @if (await AuthorizationService.AuthorizeAsync(User, "CanReview") && (User.Identity.Name != c.Author.UserName))
                {
                    <button class="btn btn-sm btn-success voteajax-comment" id="voteup-comment-@c.ID" data-vote="true" data-commentid="@c.ID"><span class="glyphicon glyphicon-thumbs-up"></span></button>
                    <button class="btn btn-sm btn-danger voteajax-comment" id="votedown-comment-@c.ID" data-vote="false" data-commentid="@c.ID"><span class="glyphicon glyphicon-thumbs-down"></span></button>
                }
                <input hidden id="comment-vote-@c.ID" class="comment-vote" data-commid="@c.ID" value="@ViewData[c.ID.ToString()]" />
                <hr />
            </div>
        }
    </div>
<div class="clear">
    <br />
    @*<a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> |
    <a asp-action="Index">Back to List</a>*@
</div>

@section Scripts {
    <script>
        $(function () {
            AddCommentAjax(".addajax", '@Url.Action("Create", "Comments", new { id=Model.ID, type="subject" })', 'text', 'username');
        });
    </script>

    <script>
        $(function () {
            DeleteCommentAjax(".deleteajax", '@Url.Action("Delete", "Comments", "")', 'commentid');
        });
    </script>

    <script>
        $(function () {
            VoteReview(".voteajax", '@Url.Action("VoteReview", "Votes", new { id=Model.ID, type="subject"})');
            VoteComment(".voteajax-comment", '@Url.Action("VoteComment", "Votes", "")', 'commentid');
        })
    </script>

    <script>
        $(document).ready(function () {
            var v = $("#voted").val();
            if (v === 'True') {
                $('#voteup').prop('disabled', true);
                $('#voteup').hide();
            }
            else if (v === 'False') {
                $('#votedown').prop('disabled', true);
                $('#votedown').hide();
            }
            $("#voted").remove();
        });
    </script>

    <script>
        $(document).ready(function () {
            var x = document.getElementsByClassName("comment-vote");
            var i;
            for (i = 0; i < x.length; i++) {
                var id = x[i].dataset.commid;
                var vote = $("#comment-vote-" + id).val();

                if (vote === 'True') {
                    $('#voteup-comment-' + id).prop('disabled', true);
                    $('#voteup-comment-' + id).hide();
                } else if (vote === 'False') {
                    $('#votedown-comment-' + id).prop('disabled', true);
                    $('#votedown-comment-' + id).hide();
                }
            }
        });
    </script>

    <script>
            $(document).ready(function () {
                $(".del").click(function () {
                    if (!confirm("Jeste li sigurni?")) {
                        return false;
                    }
                });
            });
    </script>

<script src="@Url.Content("~/lib/raty/lib/jquery.raty.js")"></script>

<script>

        @{
           @: $("#stars").raty({
           @:         starType: 'i',
           @: halfShow: true,
           @: readOnly: true,
           @: size: 5,
           @: targetFormat: '{score}',
           @: score: @Model.TotalGrade,
           @: hints: ['Lose', 'Dovoljno', 'Dobro', 'Vrlo dobro', 'Odlicno']
           @: });
        }

</script>

<script src="@Url.Content("~/lib/circles/circles.min.js")"></script>
<script>
        
            @{
              @:   Circles.create({
              @:     id: 'circles-usefulness',
              @:     radius: 30,
              @:     value: @Model.UsefulnessGrade,
              @:     maxValue: 5,
              @:     text: (value) => value,
              @:     colors: ['#D3B6C6', '#4B253A'],
              @:     duration: 1000,
              @:   });

              @:   Circles.create({
              @:     id: 'circles-difficulty',
              @:     radius: 30,
              @:     value: @Model.DifficultyGrade,
              @:     maxValue: 5,
              @:     text: (value) => value,
              @:     colors: ['#D3B6C6', '#4B253A'],
              @:     duration: 1000,
              @:   });

              @:   Circles.create({
              @:     id: 'circles-interest',
              @:     radius: 30,
              @:     value: @Model.InterestGrade,
              @:     maxValue: 5,
              @:     text: (value) => value,
              @:     colors: ['#D3B6C6', '#4B253A'],
              @:     duration: 1000,
              @:   });
            }
</script>

}

@section Styles {
    <link href="@Url.Content("~/css/profile.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/lib/raty/lib/jquery.raty.css")" rel="stylesheet" />
}


